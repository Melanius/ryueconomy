import { memoize, CACHE_TTL, CACHE_KEYS, invalidateCache } from './index';
import { 
  getAllPosts as getPostsFromNotion, 
  getPostBySlug as getPostFromNotionBySlug,
  getBlocks,
  getPageContentAndThumbnail
} from '../notion';
import { CategoryId } from '@/types/notion';
import { Post } from '@/types/post';
import { logger } from '../logger';

/**
 * 블로그 포스트 목록 가져오기 (캐시 지원)
 * 30분간 캐시됨
 */
export const getAllPosts = memoize(
  async () => {
    logger.info('모든 포스트 가져오기 (캐시 미스)');
    return await getPostsFromNotion();
  },
  () => `${CACHE_KEYS.POSTS}:all`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 슬러그로 포스트 가져오기 (캐시 지원)
 * 30분간 캐시됨
 * @param slug 게시물 슬러그
 */
export const getPostBySlug = memoize(
  async (slug: string) => {
    logger.info(`슬러그로 포스트 가져오기 (캐시 미스): ${slug}`);
    return await getPostFromNotionBySlug(slug);
  },
  (slug: string) => `${CACHE_KEYS.POST}:${slug}`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 카테고리별 포스트 필터링 (캐시 지원)
 * 30분간 캐시됨
 * @param categoryId 카테고리 ID
 */
export const getPostsByCategory = memoize(
  async (categoryId: CategoryId) => {
    logger.info(`카테고리 포스트 가져오기 (캐시 미스): ${categoryId}`);
    const posts = await getPostsFromNotion();
    return posts.filter(post => post.category === categoryId);
  },
  (categoryId: CategoryId) => `${CACHE_KEYS.POSTS}:category:${categoryId}`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 페이지네이션된 포스트 가져오기 (캐시 지원)
 * @param page 페이지 번호 (1부터 시작)
 * @param limit 페이지당 항목 수
 * @param category 카테고리 필터 (선택사항)
 * @param sortBy 정렬 방식 ('date' 또는 'views')
 */
export const getPaginatedPosts = memoize(
  async (page: number = 1, limit: number = 10, category?: CategoryId, sortBy: 'date' | 'views' = 'date') => {
    logger.info(`페이지네이션 포스트 가져오기 (캐시 미스): 페이지=${page}, 카테고리=${category || 'all'}`);
    
    // 모든 포스트 또는 카테고리별 포스트 가져오기
    const posts = category 
      ? await getPostsByCategory(category) 
      : await getAllPosts();
    
    // 정렬 방식에 따라 포스트 정렬
    const sortedPosts = [...posts].sort((a, b) => {
      if (sortBy === 'views') {
        return (b.views || 0) - (a.views || 0);
      }
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    });
    
    // 페이지네이션 적용
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedPosts = sortedPosts.slice(startIndex, endIndex);
    
    // 페이지네이션 메타데이터
    const totalPosts = sortedPosts.length;
    const totalPages = Math.ceil(totalPosts / limit);
    
    return {
      posts: paginatedPosts,
      pagination: {
        currentPage: page,
        totalPages,
        totalPosts,
        hasNextPage: page < totalPages,
        hasPrevPage: page > 1
      }
    };
  },
  (page: number, limit: number, category?: CategoryId, sortBy: 'date' | 'views' = 'date') => 
    `${CACHE_KEYS.POSTS}:paginated:${page}:${limit}:${category || 'all'}:${sortBy}`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 연관 포스트 가져오기 (캐시 지원)
 * 30분간 캐시됨
 * @param currentSlug 현재 포스트 슬러그
 * @param category 현재 포스트 카테고리
 * @param limit 가져올 포스트 수 (기본 3개)
 */
export const getRelatedPosts = memoize(
  async (currentSlug: string, category: CategoryId, limit: number = 3) => {
    logger.info(`연관 포스트 가져오기 (캐시 미스): ${currentSlug}, 카테고리=${category}`);
    
    // 같은 카테고리의 포스트 가져오기
    const categoryPosts = await getPostsByCategory(category);
    
    // 현재 포스트 제외하고 최신 포스트 선택
    const relatedPosts = categoryPosts
      .filter(post => post.slug !== currentSlug)
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, limit);
      
    return relatedPosts;
  },
  (currentSlug: string, category: CategoryId, limit: number = 3) => 
    `${CACHE_KEYS.POSTS}:related:${currentSlug}:${category}:${limit}`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 인기 포스트 가져오기 (캐시 지원)
 * 5분간 캐시됨
 * @param limit 가져올 포스트 수
 */
export const getPopularPosts = memoize(
  async (limit: number = 4) => {
    logger.info(`인기 포스트 가져오기 (캐시 미스): limit=${limit}`);
    const posts = await getAllPosts();
    
    // 조회수 기준으로 정렬하고 상위 N개 선택
    return posts
      .sort((a, b) => (b.views || 0) - (a.views || 0))
      .slice(0, limit);
  },
  (limit: number = 4) => `${CACHE_KEYS.POPULAR}:${limit}`,
  CACHE_TTL.SHORT // 5분
);

/**
 * 최신 포스트 가져오기 (캐시 지원)
 * 5분간 캐시됨
 * @param limit 가져올 포스트 수
 */
export const getRecentPosts = memoize(
  async (limit: number = 5) => {
    logger.info(`최신 포스트 가져오기 (캐시 미스): limit=${limit}`);
    const posts = await getAllPosts();
    
    // 날짜 기준으로 정렬하고 상위 N개 선택
    return posts
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, limit);
  },
  (limit: number = 5) => `${CACHE_KEYS.RECENT}:${limit}`,
  CACHE_TTL.SHORT // 5분
);

/**
 * 연도별, 월별로 포스트 그룹화 (캐시 지원)
 */
export const getPostsByYearAndMonth = memoize(
  async () => {
    logger.info(`연도/월별 포스트 그룹화 (캐시 미스)`);
    const posts = await getAllPosts();
    
    // 연도 및 월별로 포스트 그룹화
    const postsByYear: Record<string, Record<string, Post[]>> = {};
    
    posts.forEach(post => {
      const date = new Date(post.date);
      const year = date.getFullYear().toString();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      
      if (!postsByYear[year]) {
        postsByYear[year] = {};
      }
      
      if (!postsByYear[year][month]) {
        postsByYear[year][month] = [];
      }
      
      postsByYear[year][month].push(post);
    });
    
    return postsByYear;
  },
  () => `${CACHE_KEYS.POSTS}:by-year-month`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 특정 연도의 포스트 가져오기 (캐시 지원)
 * @param year 연도
 */
export const getPostsByYear = memoize(
  async (year: string) => {
    logger.info(`연도별 포스트 가져오기 (캐시 미스): ${year}`);
    const posts = await getAllPosts();
    
    return posts.filter(post => {
      const postYear = new Date(post.date).getFullYear().toString();
      return postYear === year;
    });
  },
  (year: string) => `${CACHE_KEYS.POSTS}:year:${year}`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 특정 연도 및 월의 포스트 가져오기 (캐시 지원)
 * @param year 연도
 * @param month 월 (01-12)
 */
export const getPostsByYearAndMonthValue = memoize(
  async (year: string, month: string) => {
    logger.info(`연도/월별 포스트 가져오기 (캐시 미스): ${year}/${month}`);
    const posts = await getAllPosts();
    
    return posts.filter(post => {
      const date = new Date(post.date);
      const postYear = date.getFullYear().toString();
      const postMonth = (date.getMonth() + 1).toString().padStart(2, '0');
      
      return postYear === year && postMonth === month;
    });
  },
  (year: string, month: string) => `${CACHE_KEYS.POSTS}:year-month:${year}-${month}`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 카테고리 통계 가져오기 (캐시 지원)
 * 각 카테고리의 포스트 수, 마지막 업데이트 등의 정보
 */
export const getCategoryStats = memoize(
  async () => {
    logger.info(`카테고리 통계 가져오기 (캐시 미스)`);
    const posts = await getAllPosts();
    
    // 카테고리별 통계 데이터 계산
    const stats: Record<string, { count: number, lastUpdated: string }> = {};
    
    posts.forEach(post => {
      const category = post.category;
      
      if (!stats[category]) {
        stats[category] = {
          count: 0,
          lastUpdated: post.date
        };
      }
      
      // 포스트 수 증가
      stats[category].count += 1;
      
      // 최신 날짜 갱신
      const currentLastUpdated = new Date(stats[category].lastUpdated);
      const postDate = new Date(post.date);
      
      if (postDate > currentLastUpdated) {
        stats[category].lastUpdated = post.date;
      }
    });
    
    return stats;
  },
  () => `${CACHE_KEYS.CATEGORIES}:stats`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 블록 컨텐츠 가져오기 (캐시 지원)
 * @param pageId 페이지 ID
 */
export const getCachedBlocks = memoize(
  async (pageId: string) => {
    logger.info(`블록 콘텐츠 가져오기 (캐시 미스): ${pageId.substring(0, 8)}...`);
    return await getBlocks(pageId);
  },
  (pageId: string) => `${CACHE_KEYS.POST}:blocks:${pageId}`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 페이지 콘텐츠 및 썸네일 가져오기 (캐시 지원)
 * @param pageId 페이지 ID
 */
export const getCachedPageContentAndThumbnail = memoize(
  async (pageId: string) => {
    logger.info(`페이지 콘텐츠 및 썸네일 가져오기 (캐시 미스): ${pageId.substring(0, 8)}...`);
    return await getPageContentAndThumbnail(pageId);
  },
  (pageId: string) => `${CACHE_KEYS.POST}:content:${pageId}`,
  CACHE_TTL.MEDIUM // 30분
);

/**
 * 모든 캐시 무효화
 */
export const invalidateAllCache = async (): Promise<void> => {
  logger.info('모든 Notion 캐시 무효화');
  await invalidateCache('*');
};

/**
 * 포스트 관련 모든 캐시 무효화
 */
export const invalidatePostsCache = async (): Promise<void> => {
  logger.info('모든 포스트 캐시 무효화');
  await invalidateCache(`${CACHE_KEYS.POSTS}:*`);
  await invalidateCache(`${CACHE_KEYS.RECENT}:*`);
  await invalidateCache(`${CACHE_KEYS.POPULAR}:*`);
  await invalidateCache(`${CACHE_KEYS.CATEGORIES}:*`);
};

/**
 * 특정 포스트의 캐시 무효화
 * @param slugOrId 포스트 슬러그 또는 ID
 */
export const invalidatePostCache = async (slugOrId: string): Promise<void> => {
  logger.info(`포스트 캐시 무효화: ${slugOrId}`);
  await invalidateCache(`${CACHE_KEYS.POST}:${slugOrId}`);
  await invalidateCache(`${CACHE_KEYS.POST}:blocks:${slugOrId}`);
  await invalidateCache(`${CACHE_KEYS.POST}:content:${slugOrId}`);
  
  // 관련 포스트 캐시도 무효화
  await invalidateCache(`${CACHE_KEYS.POSTS}:related:*`);
  
  // 포스트 변경이 목록에 영향을 줄 수 있으므로 목록 캐시도 무효화
  await invalidatePostsCache();
}; 